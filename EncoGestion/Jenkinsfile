pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'my-docker-registry'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        KUBERNETES_NAMESPACE = 'my-kubernetes-namespace'
        SPRING_DATASOURCE_URL = 'jdbc:postgresql://dpg-cpue6ruehbks73efid30-a.oregon-postgres.render.com:5432/encogestion_db'
        SPRING_DATASOURCE_USERNAME = 'encogestion_db_user'
        SPRING_DATASOURCE_PASSWORD = 'ZhXJ51Id3XodaGiBiZGbDP3AQVlUVnHq'
    }

    stages {
        stage('Build') {
            steps {
                dir('EncoGestion') {
                    script {
                        if (isUnix()) {
                            sh 'mvn package'
                        } else {
                            bat 'mvn package'
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir('EncoGestion') {
                    script {
                        if (isUnix()) {
                            sh 'mvn test'
                        } else {
                            bat 'mvn test'
                        }
                    }
                }
            }
            post {
                always {
                    junit 'EncoGestion/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('EncoGestion') {
                    script {
                        def dockerImageName = "${DOCKER_REGISTRY}/encogestion_api:${BUILD_NUMBER}"
                        if (isUnix()) {
                            sh "docker build -t ${dockerImageName} ."
                        } else {
                            bat "docker build -t ${dockerImageName} ."
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-credentials-id') {
                        def dockerImageName = "${DOCKER_REGISTRY}-encogestion_api:${BUILD_NUMBER}"
                        if (isUnix()) {
                            sh "docker push ${dockerImageName}"
                        } else {
                            bat "docker push ${dockerImageName}"
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('EncoGestion') {
                    script {
                        sh "kubectl --namespace=${KUBERNETES_NAMESPACE} apply -f k8s/deployment.yaml"
                        sh "kubectl --namespace=${KUBERNETES_NAMESPACE} set image deployment/encogestion_api encogestion_api=${DOCKER_REGISTRY}/encogestion_api:${BUILD_NUMBER}"
                    }
                }
            }
        }
    }
}
