pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'kelvingarcialopez'
        DOCKER_REPO = 'encogestion_api'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        KUBERNETES_NAMESPACE = 'default'
        KUBERNETES_CLUSTER_NAME = 'minikube'
        KUBERNETES_TOKEN_ID = 'kubernetes-token-id'
        SPRING_DATASOURCE_URL = 'jdbc:postgresql://dpg-cpue6ruehbks73efid30-a.oregon-postgres.render.com:5432/encogestion_db'
        SPRING_DATASOURCE_USERNAME = 'encogestion_db_user'
        SPRING_DATASOURCE_PASSWORD = 'ZhXJ51Id3XodaGiBiZGbDP3AQVlUVnHq'
    }

    stages {
        stage('Build') {
            steps {
                dir('EncoGestion') {
                    script {
                        if (isUnix()) {
                            sh 'mvn package'
                        } else {
                            bat 'mvn package'
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir('EncoGestion') {
                    script {
                        if (isUnix()) {
                            sh 'mvn test'
                        } else {
                            bat 'mvn test'
                        }
                    }
                }
            }
            post {
                always {
                    junit 'EncoGestion/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        echo 'Docker login successful'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('EncoGestion') {
                    script {
                        def dockerImageName = "${DOCKER_REGISTRY}/${DOCKER_REPO}:${BUILD_NUMBER}"
                        if (isUnix()) {
                            sh "docker build -t ${dockerImageName} ."
                        } else {
                            bat "docker build -t ${dockerImageName} ."
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def dockerImageName = "${DOCKER_REGISTRY}/${DOCKER_REPO}:${BUILD_NUMBER}"
                        if (isUnix()) {
                            sh "docker push ${dockerImageName}"
                        } else {
                            bat "docker push ${dockerImageName}"
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([string(credentialsId: KUBERNETES_TOKEN_ID, variable: 'KUBE_TOKEN')]) {
                        dir('EncoGestion') {
                            if (isUnix()) {
                                sh """
                                    kubectl config set-credentials jenkins --token=$KUBE_TOKEN
                                    kubectl config set-context jenkins-context --cluster=${KUBERNETES_CLUSTER_NAME} --user=jenkins --namespace=${KUBERNETES_NAMESPACE}
                                    kubectl config use-context jenkins-context
                                    kubectl apply -f k8s/deployment.yaml --validate=false
                                    kubectl set image deployment/encogestion_api encogestion_api=${DOCKER_REGISTRY}/${DOCKER_REPO}:${BUILD_NUMBER} --namespace=${KUBERNETES_NAMESPACE}
                                """
                            } else {
                                bat """
                                    kubectl config set-credentials jenkins --token=%KUBE_TOKEN%
                                    kubectl config set-context jenkins-context --cluster=%KUBERNETES_CLUSTER_NAME% --user=jenkins --namespace=%KUBERNETES_NAMESPACE%
                                    kubectl config use-context jenkins-context
                                    kubectl apply -f k8s/deployment.yaml --validate=false
                                    kubectl set image deployment/encogestion_api encogestion_api=%DOCKER_REGISTRY%/%DOCKER_REPO%:%BUILD_NUMBER% --namespace=%KUBERNETES_NAMESPACE%
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}
